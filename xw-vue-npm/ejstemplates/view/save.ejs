<template>
    <div class="le_comps_core_css new_page_width">
        <%_ _%><%- include(data.includeFormPath,{data:data.model.modelArray,model: data.model.modelDataName}) %>
        <div class="le_new_page_btn_group">
            <le-button type = "back" value = "返回" @click = "goBack"></le-button>
            <le-button type = "save" value = "保存" @click = "save"></le-button>
        </div>
    </div>
</template>
<script>
import util from "@util/util.js";
import KEYS from "@constant/index.js";
<%_ if( data.hasStore){ -%>
import { createNamespacedHelpers } from 'vuex';
const { mapState, mapActions,mapMutations } = createNamespacedHelpers('<%= data.store.storeName %>');
<%_ } -%>
<%_ if(data.hasModel){ -%>
import <%= data.model.modelClassName %> from '@model/<%= data.model.modelFileName %>';
<%_ } -%>
import <%= data.service.serviceClassName%> from '@services/<%= data.service.serviceFileName%>';
export default {
    name:"<%= data.componentName %>",
    data(){
        return {
            <%= data.model.modelDataName %>: new <%= data.model.modelClassName %>(),
        }
    },
    computed:{
        <%_ if( data.hasStore){ -%>
        ...mapState([
            <%_ data.store.storeKeys.forEach(function(name){ -%>
            "<%= name%>",
            <%_ }) -%>
        ]),
        <%_ } -%>
        isEdit(){
            return this.$route.query.tag == KEYS.GOLBAL.ACTION.EDIT;
        },
        isCreate(){
            return this.$route.query.tag == KEYS.GOLBAL.ACTION.ADD;
        },
        isDetail(){
            return this.$route.query.tag == KEYS.GOLBAL.ACTION.DETAIL;
        }
    },
    methods:{
        <%_ if( data.hasStore){ -%>
        ...mapActions([
            <%_ data.store.storeActions.forEach(function(name){ -%>
            "<%= name%>",
            <%_ }) -%>
        ]),
        <%_ } -%>
        save(){
            this.$refs.saveForm.validate().then(x => {
                <%= data.service.serviceClassName%>.save(this.<%= data.model.modelDataName %>.get()).then(res=>{
                    this.alert.showAlert("success",res.msg);
                    this.goBack();
                }).catch(err=>{
                    this.alert.showAlert("error",err.msg);
                })
            })
        },
        goBack(){
            this.$router.go(-1);
        },
    },
    mounted(){
        <%_ if( data.hasStore){ -%>
        <%_ data.store.storeActions.forEach(function(name){ -%>
        this.<%= name%>();
        <%_ }) -%>
        <%_ } -%>
        this.$refs.saveForm.reset();
        if(this.isEdit || this.isDetail){
            this.<%= data.model.modelDataName %>.set({id:this.$route.query.id});
            <%= data.service.serviceClassName%>.detail(this.<%= data.model.modelDataName %>.get()).then(x=>{
                this.<%= data.model.modelDataName %>.set(x.data);
            })
        }
    }
}
</script>
<style scoped>
    .new_page_width{
        width:80%;
        margin:0 auto;
    }
</style>
    